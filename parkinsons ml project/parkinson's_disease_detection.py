# -*- coding: utf-8 -*-
"""Parkinson's Disease Detection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-1CGFsRzA6dG7CrAKPtGAcd6IOjH8qIt

Add dependencies
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn import svm
from sklearn.metrics import accuracy_score

"""data collection"""

#loadind the data from csv file to pandas
parkinsons_data=pd.read_csv('/content/parkinsons.csv')

#print five rows of the data frame
parkinsons_data.head()

# number of rows and column in the dataframe
parkinsons_data.shape

#getting more information about data set
parkinsons_data.info()

#checking the missing values in each column
parkinsons_data.isnull().sum()

#getting some statistical measurea of data
parkinsons_data.describe()

#distribution of target variable
parkinsons_data['status'].value_counts()

"""1-parkinsion

0-healthy
"""

#parkinsons the data besd on the tarhet variable
parkinsons_data.groupby('status').mean()

"""data preprocessing
separating the feature and target
"""

X = parkinsons_data.drop(columns=['name','status'], axis=1)
Y = parkinsons_data['status']

print(X)

print(Y)

"""Splitting the data to training data and test data

"""

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=2)

print(X.shape, X_train.shape, X_test.shape)

scaler = StandardScaler()

scaler.fit(X_train)

X_train = scaler.transform(X_train)

X_test = scaler.transform(X_test)

print(X_train)

"""model training
supprt vector machine
"""

model = svm.SVC(kernel='linear')

#tainnig the svm model with training data
model.fit(X_train,Y_train)

"""model evaluation
accuracy

"""

# accuracy score on training data
X_train_prediction = model.predict(X_train)
training_data_accuracy = accuracy_score(Y_train, X_train_prediction)

print('Accuracy score of training data :',training_data_accuracy)

# accuracy score on training data
X_test_prediction = model.predict(X_test)
test_data_accuracy = accuracy_score(Y_test, X_test_prediction)

print('Accuracy score of test data : ', test_data_accuracy)

"""Building predictive system"""

input_data = (119.99200,157.30200,74.99700,0.00784,0.00007,0.00370,0.00554,0.01109,0.04374,0.42600,0.02182,0.03130,0.02971,0.06545,0.02211,21.03300,0.414783,0.815285,-4.813031,0.266482,2.301442,0.284654)


#chaniing the input data into numpy array
input_data_as_numpy_array = np.asarray(input_data)

#reshape the numpy array
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

#standardize the data
std_data = scaler.transform(input_data_reshaped)

prediction = model.predict(std_data)
print(prediction)


if (prediction[0] == 0):
  print("The Person does not have Parkinsons Disease")

else:
  print("The Person has Parkinsons")